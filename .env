// ✅ BACKEND — server.js

import express from 'express';
import cors from 'cors';
import bcrypt from 'bcryptjs';
import jwt from 'jsonwebtoken';
import dotenv from 'dotenv';

dotenv.config(); // Load environment variables

const app = express();
const PORT = process.env.PORT || 5050;
const SECRET_KEY = process.env.JWT_SECRET || "supersecretkey";

app.use(cors());
app.use(express.json());

// 🔹 Mock Data (In-memory storage)
let users = []; // Store registered users
let posts = [
  { id: 1, title: 'First Post', content: 'This is the first post!' },
  { id: 2, title: 'Second Post', content: 'This is another post.' }
];

// 🛡️ **Middleware: Protect Routes**
const authenticate = (req, res, next) => {
  const token = req.header("Authorization")?.split(" ")[1];
  if (!token) return res.status(401).json({ message: "Access Denied" });

  try {
    const verified = jwt.verify(token, SECRET_KEY);
    req.user = verified;
    next();
  } catch (error) {
    res.status(400).json({ message: "Invalid Token" });
  }
};

// 🟢 **GET Route for /register (Browser Testing)**
app.get('/register', (req, res) => {
  res.status(200).send("📩 Use POST to register a user here!");
});

// 🟢 **Register User**
app.post('/register', async (req, res) => {
  const { username, password } = req.body;

  if (users.some(user => user.username === username)) {
    return res.status(400).json({ message: "User already exists" });
  }

  const hashedPassword = await bcrypt.hash(password, 10);
  const newUser = { id: users.length + 1, username, password: hashedPassword };
  users.push(newUser);
  res.status(201).json({ message: "User registered successfully" });
});

// 🟡 **Login User**
app.post('/login', async (req, res) => {
  const { username, password } = req.body;
  const user = users.find(user => user.username === username);

  if (!user || !(await bcrypt.compare(password, user.password))) {
    return res.status(400).json({ message: "Invalid credentials" });
  }

  const token = jwt.sign({ id: user.id, username: user.username }, SECRET_KEY, { expiresIn: "1h" });
  res.json({ token, message: "Login successful" });
});

// 🟢 **Fetch All Posts (Public)**
app.get('/posts', (req, res) => {
  res.status(200).json(posts);
});

// 🟡 **Create Post (Protected)**
app.post('/posts', authenticate, (req, res) => {
  const newPost = { id: posts.length + 1, ...req.body, user: req.user.username };
  posts.push(newPost);
  res.status(201).json(newPost);
});

// 🟠 **Update Post (Protected)**
app.put('/posts/:id', authenticate, (req, res) => {
  const { id } = req.params;
  const post = posts.find((p) => p.id === parseInt(id));

  if (!post) return res.status(404).json({ message: "Post not found" });

  post.title = req.body.title || post.title;
  post.content = req.body.content || post.content;
  res.status(200).json(post);
});

// 🔴 **Delete Post (Protected)**
app.delete('/posts/:id', authenticate, (req, res) => {
  const { id } = req.params;
  const postIndex = posts.findIndex((p) => p.id === parseInt(id));
  if (postIndex === -1) return res.status(404).json({ message: "Post not found" });

  const deletedPost = posts.splice(postIndex, 1);
  res.status(200).json({ message: "Post deleted", deletedPost });
});

// ✅ **Start Server**
app.listen(PORT, () => console.log(`✅ Backend running on http://localhost:${PORT}`));